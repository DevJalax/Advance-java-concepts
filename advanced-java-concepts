DSA (Data Structures and Algorithms ) :
1) Data structures : Array , String , Hashtable , Trees , Heap , Graph , Set , List , HashMap , Stack , Queue , Trie , Data stream , Iterator , Bitmask
2) Algorithms : Sorting , Greedy , DP , Binary search , BFS , DFS , Recursion , BackTracking, Sliding window , Line sweep , Memoization , Rolling hash , Quickselect , Reservoir sampling , Bloom filters
3) Game theory
4) Combinatronics and number theory
5) Geometrics - strongly connected component and Eulerian circuit

Spring Integration

Spring Security + RBAC (to restrict users based on their access)

Spring Cloud (connecting spring applications to cloud)

Spring AI (to use any ai model in spring project)

Spring Batch (batch processing of data)

Spring WebFlux (for handling streaming data)

Spring Hateoas (link management)

SOLID principles

Multiple DB connect and multitenancy

Annotations

Strings - String Builder , String Buffer , Regex , String Pool

Concurrency - Thread creation , Thread lifecycle , Inter thread commuincation , Thread schedular , Thread pool , Executor framework
Fork join framework , count down latch , cyclic barrier , phaser , exchanger , atomic variables , locks and semaphores

Collections

Streams

Dynamic method dispatch and RMI


API Fault-tolerance patterns :

1) circuit breaker pattern

2) retry pattern

3) backpressure pattern

4) throttling pattern

5) rate limiting pattern

6) bulkhead pattern

7) fallback pattern

8) health check pattern


IOC - dependency injection , actuator , loader , SB starter , bean lifecycle , aop

Jaxb , JsonMan [serialization]

JDBI / JDBC

Mapstruct

Unit Testing [Junit , Jmeter , Cucumber , Mockito] 

Dozer

Graal VM


Hibernate :

State of data maintanence

diff between getbyxxx and findbyxxx

lazy loading vs eager loading

cascading and cache

Logging levels : time based rolling policy

HQL

Persistence lifecycle

Get() vs Load()

Entity manager

Criteria api


Configurations : 

Nginx , RabbitMQ , Redis , HttpClient , CloudFlare , AWS , DB


Back-end Architecture patterns : 

1) Layered Architecture Pattern (MVC) (enterprise applications)

2) Event-driven and Event Sourcing Architecture Pattern (CQRS) (Real-time data processing)

3) Microkernel Architecture Pattern (Wordpress(CMS) and Eclipse(IDE))

4) Microservices Architecture Pattern (Netflix , Uber , Amazon)

5) Space-Based Architecture Pattern (Gaming and trading)

6) Client-Server Architecture Pattern (web portals)

7) Master-Slave Architecture Pattern (high availability and fault tolerance)(MongoDB , Hadoop)

8) Pipe-Filter Architecture Pattern (Data processing pipeline)(Apache spark and Flink)

9) Broker Architecture Pattern (RabbitMQ , ActiveMQ : Message Queues)

10) Peer-to-Peer Architecture Pattern (Decentralized)(torrent, blockchain)

11) Service Oriented Architecture Pattern (enterprise applications , legacy system integration)

12) N-tier Architecture Pattern

13) Hexagonal Architecture Pattern (Ports and Adapter) (Domain Driven Design)


Distributed system components :

1) Cache(Redis)

2) Message queue (RabbitMQ)

3) LTM (Logging , Tracing and Monitoring)(ELK)

4) Service discovery (etcd)

5) Load balancing (Cloud)

6) Auto-scaling (Cloud)

7) Config management and Container orchestration (Docker + Kubernetes)

8) Serverless platform (Cloud)

9) content delivery network (CDN)
